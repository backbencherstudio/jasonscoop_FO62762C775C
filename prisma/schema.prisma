generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String    @id @default(cuid())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email             String?   @unique
  username          String?   @unique
  name              String?   @db.VarChar(255)
  first_name        String?   @db.VarChar(255)
  last_name         String?   @db.VarChar(255)
  password          String?   @db.VarChar(255)
  domain            String?   @unique
  avatar            String?
  phone_number      String?
  country           String?
  state             String?
  local_government  String?
  city              String?
  address           String?
  zip_code          String?
  gender            String?
  date_of_birth     DateTime? @db.Date
  billing_id        String?
  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String? // secret key for two factor authentication

  accounts                  Account[]
  blog_comments             BlogComment[]
  blogs                     Blog[]
  creator_calls             Call[]         @relation("creator")
  participant_calls         Call[]         @relation("participant")
  carts                     Cart[]
  user_checkouts            Checkout[]     @relation("user")
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  email_logs                EmailLog[]
  likes                     Like[]
  main_orders               MainOrder[]
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")
  order_coupons             OrderCoupon[]
  user_orders               Order[]        @relation("user")

  temp_redeems         TempRedeem[]
  user_payment_methods UserPaymentMethod[]
  products             Product[]
  variants             Variant[]
  stores               Store[]
  user_documents       UserDocument[]
  user_settings        UserSetting[]
  traffic_sources      TrafficSource[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  payment_transactions PaymentTransaction[]
  reviews              Review[]
  transaction_reports  TransactionReport[]
  order_reports        OrderReport[]

  @@map("users")
}

model UserDocument {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     String? // pending, approved, rejected
  user_id    String?
  type       String?
  file_type  String?
  file_path  String?
  file_name  String?
  approved_at DateTime?
  user       User?    @relation(fields: [user_id], references: [id])

  @@map("user_documents")
}

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status           Int?             @default(1) @db.SmallInt
  title            String?
  name             String?
  user_id          String?
  permission_roles PermissionRole[]
  role_users       RoleUser[]
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  user_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  read_at               DateTime?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model Store {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status       Int?    @default(1) @db.SmallInt
  user_id      String?
  name         String?
  slug         String? @unique
  description  String?
  domain       String? @unique
  logo         String?
  banner       String?
  address      String?
  phone_number String?
  store_status String? @default("pending")

  attributes           Attribute[]
  Coupon               Coupon[]
  orders               Order[]
  payment_transactions PaymentTransaction[]
  products             Product[]
  user                 User?                @relation(fields: [user_id], references: [id])

  @@map("stores")
}

model Product {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status           Int?      @default(1) @db.SmallInt
  approved_at      DateTime?
  user_id          String?
  store_id         String?
  name             String
  slug             String?
  product_type     String?   @default("simple")
  meta_title       String?
  meta_description String?
  meta_keyword     String?
  description      String
  price            Decimal?
  discount         Decimal?
  old_discount     Decimal?
  track_quantity   Int?      @default(0)
  quantity         Int?      @default(0)
  sku              String?
  barcode          String?
  is_sale          Int?      @default(0)
  cost_per_item    Decimal?
  weight_unit      String?
  weight           Decimal?
  length           Decimal?
  width            Decimal?
  height           Decimal?

  carts              Cart[]
  checkout_items     CheckoutItem[]
  order_items        OrderItem[]
  order_return_items OrderReturnItem[]
  product_categories ProductCategory[]
  product_files      ProductFile[]
  product_tags       ProductTag[]
  store              Store?            @relation(fields: [store_id], references: [id])
  user               User?             @relation(fields: [user_id], references: [id])
  reviews            Review[]
  variants           Variant[]

  @@map("products")
}

model Variant {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  sort_order     Int?      @default(0)
  approved_at    DateTime?
  user_id        String?
  product_id     String?
  price          Decimal?
  discount       Decimal?
  old_discount   Decimal?
  track_quantity Int?      @default(0)
  quantity       Int?      @default(0)
  sku            String?
  barcode        String?
  is_sale        Int?      @default(0)
  cost_per_item  Decimal?
  weight_unit    String?
  weight         Decimal?
  length         Decimal?
  width          Decimal?
  height         Decimal?

  carts              Cart[]
  checkout_items     CheckoutItem[]
  order_items        OrderItem[]
  order_return_items OrderReturnItem[]
  variant_attributes VariantAttribute[]
  variant_files      VariantFile[]
  product            Product?           @relation(fields: [product_id], references: [id])
  user               User?              @relation(fields: [user_id], references: [id])

  @@map("variants")
}

model Category {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  sort_order         Int?              @default(0)
  name               String?
  parent_id          String?
  product_categories ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  product_id  String
  category_id String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([product_id, category_id])
  @@map("product_categories")
}

model Tag {
  id           String       @id @default(cuid())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  deleted_at   DateTime?
  status       Int?         @default(1) @db.SmallInt
  sort_order   Int?         @default(0)
  name         String?
  product_tags ProductTag[]

  @@map("tags")
}

model ProductTag {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  product_id String
  tag_id     String
  type       String?
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  tag        Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([product_id, tag_id])
  @@map("product_tags")
}

model ProductFile {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?     @default(1) @db.SmallInt
  sort_order Int?     @default(0)
  product_id String?
  file       String?
  file_alt   String?
  type       String?
  product    Product? @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("product_files")
}

model VariantFile {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  sort_order Int?     @default(0)
  variant_id String?
  file       String?
  file_alt   String?
  type       String?
  variant    Variant? @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@map("variant_files")
}

model Attribute {
  id                 String             @id @default(cuid())
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now())
  deleted_at         DateTime?
  status             Int?               @default(1) @db.SmallInt
  sort_order         Int?               @default(0)
  store_id           String?
  name               String?
  attribute_values   AttributeValue[]
  store              Store?             @relation(fields: [store_id], references: [id])
  variant_attributes VariantAttribute[]

  @@map("attributes")
}

model AttributeValue {
  id                 String             @id @default(cuid())
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now())
  deleted_at         DateTime?
  status             Int?               @default(1) @db.SmallInt
  sort_order         Int?               @default(0)
  attribute_id       String?
  name               String?
  attribute          Attribute?         @relation(fields: [attribute_id], references: [id])
  variant_attributes VariantAttribute[]

  @@map("attribute_values")
}

model VariantAttribute {
  id                 String          @id @default(cuid())
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now())
  deleted_at         DateTime?
  status             Int?            @default(1) @db.SmallInt
  variant_id         String?
  attribute_id       String?
  attribute_value_id String?
  attribute          Attribute?      @relation(fields: [attribute_id], references: [id])
  attribute_value    AttributeValue? @relation(fields: [attribute_value_id], references: [id])
  variant            Variant?        @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@map("variant_attributes")
}

model Cart {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  user_id    String?
  product_id String?
  variant_id String?
  quantity   Int?      @default(1)
  attribute  String?
  product    Product?  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  variant    Variant?  @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@map("carts")
}

model Checkout {
  id             String         @id @default(cuid())
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  deleted_at     DateTime?
  status         Int?           @default(1) @db.SmallInt
  user_id        String?
  first_name     String?
  last_name      String?
  email          String?
  phone_number   String?
  address1       String?
  address2       String?
  city           String?
  state          String?
  zip_code       String?
  country        String?
  checkout_items CheckoutItem[]
  user           User?          @relation("user", fields: [user_id], references: [id], onDelete: Cascade)
  temp_redeems   TempRedeem[]

  @@map("checkouts")
}

model CheckoutItem {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  checkout_id String?
  product_id  String?
  variant_id  String?
  price       Decimal?
  quantity    Int?      @default(1)
  attribute   String?
  checkout    Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)
  product     Product?  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant     Variant?  @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@map("checkout_items")
}

model TempRedeem {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  user_id     String?
  coupon_id   String?
  checkout_id String?
  checkout    Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)
  coupon      Coupon?   @relation(fields: [coupon_id], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("temp_redeems")
}

model MainOrder {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status  String? @default("pending")
  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // geo location
  longitude Decimal? @db.Decimal(10, 8)
  latitude  Decimal? @db.Decimal(10, 8)
  country   String?
  city      String?
  state     String?
  zip_code  String?

  orders Order[]

  @@map("main_orders")
}

model Order {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  invoice_number               String?   @unique
  approved_at                  DateTime?
  status                       String?   @default("pending")
  user_id                      String?
  main_order_id                String?
  store_id                     String?
  order_date_time              DateTime?
  total_amount                 Decimal?
  payment_status               String?
  payment_raw_status           String?
  paid_amount                  Decimal?
  paid_currency                String?
  payment_provider             String?
  payment_reference_number     String?
  payment_provider_charge_type String?   @default("percentage")
  payment_provider_charge      Decimal?

  // hardcoded customer info
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  zip_code     String?
  country      String?
  comments     String?

  order_coupons        OrderCoupon[]
  order_items          OrderItem[]
  order_returns        OrderReturn[]
  main_order           MainOrder?           @relation(fields: [main_order_id], references: [id])
  store                Store?               @relation(fields: [store_id], references: [id])
  user                 User?                @relation("user", fields: [user_id], references: [id])
  payment_transactions PaymentTransaction[]
  reviews              Review[]

  @@map("orders")
}

model OrderItem {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  order_id   String?
  product_id String?
  variant_id String?
  quantity   Int?      @default(1)
  price      Decimal?
  attribute  String?
  order      Order?    @relation(fields: [order_id], references: [id])
  product    Product?  @relation(fields: [product_id], references: [id])
  variant    Variant?  @relation(fields: [variant_id], references: [id])

  @@map("order_items")
}

model OrderReturn {
  id                 String            @id @default(cuid())
  created_at         DateTime          @default(now())
  updated_at         DateTime          @default(now())
  deleted_at         DateTime?
  order_id           String?
  reason             String?
  additional_info    String?
  admin_status       String?           @default("pending")
  vendor_status      String?           @default("pending")
  order_return_items OrderReturnItem[]
  order              Order?            @relation(fields: [order_id], references: [id])

  @@map("order_returns")
}

model OrderReturnItem {
  id              String       @id @default(cuid())
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  deleted_at      DateTime?
  order_return_id String?
  product_id      String?
  variant_id      String?
  quantity        Int?         @default(1)
  order_return    OrderReturn? @relation(fields: [order_return_id], references: [id])
  product         Product?     @relation(fields: [product_id], references: [id])
  variant         Variant?     @relation(fields: [variant_id], references: [id])

  @@map("order_return_items")
}

model OrderCoupon {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  user_id     String?
  order_id    String?
  coupon_id   String?
  method      String?   @default("code")
  code        String?
  amount_type String?   @default("percentage")
  amount      Decimal?
  coupon      Coupon?   @relation(fields: [coupon_id], references: [id])
  order       Order?    @relation(fields: [order_id], references: [id])
  user        User?     @relation(fields: [user_id], references: [id])

  @@map("order_coupons")
}

model Coupon {
  id                String        @id @default(cuid())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now())
  deleted_at        DateTime?
  status            Int?          @default(1) @db.SmallInt
  store_id          String?
  method            String?       @default("code")
  code              String?
  name              String?
  description       String?
  amount_type       String?       @default("percentage")
  amount            Decimal?
  uses              Int?          @default(0)
  max_uses          Int?          @default(1)
  max_uses_per_user Int?          @default(1)
  coupon_type       String?       @default("order")
  coupon_ids        String?
  starts_at         DateTime?
  expires_at        DateTime?
  min_type          String?       @default("none")
  min_amount        Decimal?
  min_quantity      Int?
  store             Store?        @relation(fields: [store_id], references: [id])
  order_coupons     OrderCoupon[]
  temp_redeems      TempRedeem[]

  @@map("coupons")
}

model UserPaymentMethod {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  user_id           String?
  payment_method_id String?
  checkout_id       String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id               String    @id @default(cuid())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
  deleted_at       DateTime?
  store_id         String?
  user_id          String?
  order_id         String?
  type             String?   @default("order")
  withdraw_via     String?   @default("wallet")
  provider         String?
  reference_number String?
  status           String?   @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?
  order            Order?    @relation(fields: [order_id], references: [id])
  store            Store?    @relation(fields: [store_id], references: [id])
  user             User?     @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model Review {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  status       Int?      @default(1) @db.SmallInt
  user_id      String?
  order_id     String?
  product_id   String?
  rating_value Float?
  comment      String?
  order        Order?    @relation(fields: [order_id], references: [id])
  product      Product?  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [user_id], references: [id])

  @@map("reviews")
}

model Message {
  id              String         @id @default(cuid())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  deleted_at      DateTime?
  status          MessageStatus? @default(PENDING)
  sender_id       String?
  receiver_id     String?
  conversation_id String?
  attachment_id   String?
  message         String?
  attachment      Attachment?    @relation(fields: [attachment_id], references: [id])
  conversation    Conversation?  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  receiver        User?          @relation("receiver", fields: [receiver_id], references: [id])
  sender          User?          @relation("sender", fields: [sender_id], references: [id])

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  name       String?
  type       String?
  size       Int?
  file       String?
  file_alt   String?
  messages   Message[]

  @@map("attachments")
}

model Conversation {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  creator_id     String?
  participant_id String?
  creator        User?     @relation("creator", fields: [creator_id], references: [id])
  participant    User?     @relation("participant", fields: [participant_id], references: [id])
  messages       Message[]

  @@map("conversations")
}

model Call {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  ended_at       DateTime?
  creator_id     String?
  participant_id String?
  status         String?   @default("pending")
  creator        User?     @relation("creator", fields: [creator_id], references: [id])
  participant    User?     @relation("participant", fields: [participant_id], references: [id])

  @@map("calls")
}

model Blog {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  status        Int?          @default(1) @db.SmallInt
  approved_at   DateTime?
  user_id       String?
  title         String?
  description   String?
  body          String?
  read_time     Int?          @default(0)
  like_count    Int?          @default(0)
  blog_comments BlogComment[]
  blog_images   BlogImage[]
  user          User?         @relation(fields: [user_id], references: [id])

  @@map("blogs")
}

model BlogImage {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  blog_id    String?
  image      String?
  image_alt  String?
  blog       Blog?     @relation(fields: [blog_id], references: [id])

  @@map("blog_images")
}

model BlogComment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status  Int?    @default(1) @db.SmallInt
  blog_id String?
  user_id String?
  comment String?
  blog    Blog?   @relation(fields: [blog_id], references: [id])
  user    User?   @relation(fields: [user_id], references: [id])

  @@map("blog_comments")
}

model Like {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id       String?
  likeable_type String?
  likeable_id   String?
  user          User?   @relation(fields: [user_id], references: [id])

  @@map("likes")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model Country {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  flag         String?
  name         String?
  country_code String?
  dial_code    String?

  @@map("countries")
}

model Language {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  name   String?
  code   String?

  @@map("languages")
}

model EmailTemplate {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  key        String?
  subject    String?
  body       String?
  language   String?
  email_logs EmailLog[]

  @@map("email_templates")
}

model EmailLog {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id           String?
  email_template_id String?
  subject           String?
  body              String?
  to                String?
  cc                String?
  bcc               String?
  status            String?
  email_template    EmailTemplate? @relation(fields: [email_template_id], references: [id])
  user              User?          @relation(fields: [user_id], references: [id])

  @@map("email_logs")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id    String?
  setting_id String?
  value      String?
  setting    Setting? @relation(fields: [setting_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

// this table stores traffic source information
model TrafficSource {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  source   String? // e.g. google, facebook, twitter, etc
  referrer String? // e.g. https://www.google.com, https://www.facebook.com, etc

  @@map("traffic_sources")
}

model TransactionReport {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  transaction_id   String?
  transaction_date DateTime?
  date_from        DateTime?
  date_to          DateTime?
  format           String?
  file_url         String?
  status           String?
  report_type      Int?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  @@map("transaction_reports")
}

model OrderReport {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order_id    String?
  order_date  DateTime?
  date_from   DateTime?
  date_to     DateTime?
  format      String?
  file_url    String?
  status      String?
  report_type Int?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  @@map("order_reports")
}

// this table stores example
// model Note {
//   id                String  @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1) @db.SmallInt

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

model Video {
  id          String   @id @default(uuid())
  title       String
  category    String
  description String
  videoUrl    String
  thumbnailUrl String
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
